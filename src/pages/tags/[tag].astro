---
import type { MarkdownInstance } from "astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import WorkItem from "../../components/WorksPostLink.astro";
import Ogp from "../../components/Ogp.astro";

export interface Params {
  tag: string;
}

export interface Props {
  works: MarkdownInstance<Record<string, any>>[];
}

export interface getStaticPathsReturn {
  params: Params;
  props: Props;
}

export async function getStaticPaths(): Promise<getStaticPathsReturn[]> {
  const allWorks : MarkdownInstance<Record<string, any>>[] = Object.values(import.meta.glob("../works-posts/*.md", { eager: true }));;;

  const uniqueTags = [
    ...new Set(allWorks.map((work) => work.frontmatter.tags).flat()),
  ] as string[];

  return uniqueTags.map((tag) => {
    return {
      params: { tag },
      props: { works: allWorks },
    };
  });
}

const { tag } = Astro.params;
const { works } = Astro.props;
const filteredWorks = works.filter((work) =>
      work.frontmatter.tags.includes(tag)
    );
const pageTitle = `${tag}がついたページ`
const description = `月波 清火の制作したものについて記録しているサイト。「${tag}」タグがついたページの一覧。`
---
{ tag === undefined ? <></> : (
<BaseLayout title={pageTitle}>
  <Fragment slot="head">
        <Ogp title={pageTitle} description={description} />
  </Fragment>
  <h1><span>{tag}</span>がついたページ</h1>
  <div class="works-post-list">
    {
      filteredWorks.map((work) => (
        <WorkItem title={work.frontmatter.title}
          description={work.frontmatter.description}
          thumbnail={work.frontmatter.thumbnail}
          thumbnailAlt={work.frontmatter.thumbnailAlt}
          url={work.url} />
      ))
    }
  </div>
</BaseLayout>
)}